{"version":3,"sources":["components/Introduction.js","components/BasicTable.js","components/Paginate.js","components/Internationalization.js","components/CustomStyles.js","App.js","serviceWorker.js","index.js"],"names":["Introduction","Fragment","href","target","rel","BasicTable","list","filterFunction","record","Title","Director","description","dataOwner","defaultMaxRecordPerPage","defaultSorter","parameter","order","iterateFunction","key","src","Images","alt","style","width","height","Year","Actors","imdbRating","Released","Runtime","fields","text","sortable","React","Component","label","className","App","Paginate","Internationalization","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.47bf6e9b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Introduction = ()=>{\n    return (\n        <React.Fragment>\n            <h1>React Simpliest Table</h1>\n            <p>React Simpliest Table is a <a href=\"https://github.com/facebook/react\" target=\"_blank\" rel=\"noopener noreferrer\">react</a> table filterable, sortable, and pagination. Was prepared under <a href=\"https://getbootstrap.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Bootstrap</a> styles.</p>\n            <p>All code source is <a href=\"https://github.com/st4nn/react-simpliest-table/tree/master/example/src\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></p>\n        </React.Fragment>\n    )\n}\n\nexport default Introduction;","import React from 'react';\n\nimport Table from 'react-simpliest-table';\nimport list from \"config/Films.json\";\n\nclass BasicTable extends React.Component{\n    render(){\n        return (\n            <React.Fragment>\n                <h2>Basic Table</h2>\n                <Table\n                    list={list}\n                    filterFunction={record => `${record.Title} ${record.Director} ${record.description} ${record.dataOwner}`}\n                    defaultMaxRecordPerPage={25}\n                    defaultSorter={{ parameter: \"imdbRating\", order: \"DESC\" }}\n                    iterateFunction={(record) => {\n                        return (\n                            <tr key={record.Title}>\n                                <td>\n                                    <img src={record.Images[0]} alt={record.Title} style={{ width: \"45px\", height: \"45px\" }} />\n                                </td>\n                                <td>{record.Title}</td>\n                                <td>{record.Year}</td>\n                                <td>{record.Director}</td>\n                                <td>{record.Actors}</td>\n                                <td>{record.imdbRating}</td>\n                                <td>{record.Released}</td>\n                                <td>{record.Runtime}</td>\n\n                            </tr>\n                        )\n                    }}\n                    fields={[{\n                        text: \"\"\n                    },\n                    {\n                        text: \"Movie Title\",\n                        parameter: \"Title\"\n                    }, {\n                        text: \"Year\",\n                        parameter: \"Year\"\n                    }, {\n                        text: \"Film Director\",\n                        sortable: false\n                    }, {\n                        text: \"Actors\",\n                        sortable: false\n                    }, {\n                        text: \"Rating of imdb\",\n                        sortable: false\n                    }, {\n                        text: \"Released date\",\n                        sortable: false\n                    }, {\n                        text: \"Runtime\",\n                        parameter: \"Runtime\"\n                    }]} />\n            </React.Fragment>\n        )\n    }\n}\n\nexport default BasicTable;","import React from 'react';\n\nimport Table from 'react-simpliest-table';\nimport list from \"config/Films.json\";\n\nclass BasicTable extends React.Component {\n    render() {\n        return (\n            <React.Fragment>\n                <h2>With Pagination</h2>\n                <Table\n                    list={list}\n                    filterFunction={record => `${record.Title} ${record.Director} ${record.description} ${record.dataOwner}`}\n                    defaultMaxRecordPerPage={5}\n                    defaultSorter={{ parameter: \"imdbRating\", order: \"DESC\" }}\n                    iterateFunction={(record) => {\n                        return (\n                            <tr key={record.Title}>\n                                <td>\n                                    <img src={record.Images[0]} alt={record.Title} style={{ width: \"45px\", height: \"45px\" }} />\n                                </td>\n                                <td>{record.Title}</td>\n                                <td>{record.Year}</td>\n                                <td>{record.Director}</td>\n                                <td>{record.Actors}</td>\n                                <td>{record.imdbRating}</td>\n                                <td>{record.Released}</td>\n                                <td>{record.Runtime}</td>\n\n                            </tr>\n                        )\n                    }}\n                    fields={[{\n                        text: \"\"\n                    },\n                    {\n                        text: \"Movie Title\",\n                        parameter: \"Title\"\n                    }, {\n                        text: \"Year\",\n                        parameter: \"Year\"\n                    }, {\n                        text: \"Film Director\",\n                        sortable: false\n                    }, {\n                        text: \"Actors\",\n                        sortable: false\n                    }, {\n                        text: \"Rating of imdb\",\n                        sortable: false\n                    }, {\n                        text: \"Released date\",\n                        sortable: false\n                    }, {\n                        text: \"Runtime\",\n                        parameter: \"Runtime\"\n                    }]} />\n            </React.Fragment>\n        )\n    }\n}\n\nexport default BasicTable;","import React from 'react';\n\nimport Table from 'react-simpliest-table';\nimport list from \"config/Films.json\";\n\nclass BasicTable extends React.Component {\n    render() {\n        return (\n            <React.Fragment>\n                <h2>Internationalization</h2>\n                <Table\n                    list={list}\n                    filterFunction={record => `${record.Title} ${record.Director} ${record.description} ${record.dataOwner}`}\n                    defaultMaxRecordPerPage={5}\n                    defaultSorter={{ parameter: \"imdbRating\", order: \"DESC\" }}\n                    label={{\n                        \"all\": \"Todos\",\n                        \"records_per_page\": \"registros por página\",\n                        \"showing\": \"Mostrando\",\n                        \"to\": \"a\",\n                        \"of\": \"de\",\n                        \"rows\": \"filas\",\n                        \"no_data\": \"No hay registros aún,\",\n                        \"no_data_filtered\": \"Ningún valor coincide con tu filtro\",\n                        \"filter\": \"Filtro,\"\n                    }}\n                    iterateFunction={(record) => {\n                        return (\n                            <tr key={record.Title}>\n                                <td>\n                                    <img src={record.Images[0]} alt={record.Title} style={{ width: \"45px\", height: \"45px\" }} />\n                                </td>\n                                <td>{record.Title}</td>\n                                <td>{record.Year}</td>\n                                <td>{record.Director}</td>\n                                <td>{record.Actors}</td>\n                                <td>{record.imdbRating}</td>\n                                <td>{record.Released}</td>\n                                <td>{record.Runtime}</td>\n\n                            </tr>\n                        )\n                    }}\n                    fields={[{\n                        text: \"\"\n                    },\n                    {\n                        text: \"Título de la Película\",\n                        parameter: \"Title\"\n                    }, {\n                        text: \"Año de lanzamiento\",\n                        parameter: \"Year\"\n                    }, {\n                        text: \"Director\",\n                        sortable: false\n                    }, {\n                        text: \"Actores\",\n                        sortable: false\n                    }, {\n                        text: \"Calificación de imdb\",\n                        sortable: false\n                    }, {\n                        text: \"Fecha de publicación\",\n                        sortable: false\n                    }, {\n                        text: \"Duración\",\n                        parameter: \"Runtime\"\n                    }]} />\n            </React.Fragment>\n        )\n    }\n}\n\nexport default BasicTable;","import React from 'react';\n\nimport Table from 'react-simpliest-table';\nimport list from \"config/Films.json\";\n\nimport \"assets/CustomStyles.css\";\n\nclass BasicTable extends React.Component {\n    render() {\n        return (\n            <React.Fragment>\n                <h2>Custom Styles</h2>\n                <div className=\"custom-styles-table\">\n                    <Table\n                        list={list}\n                        filterFunction={record => `${record.Title} ${record.Director} ${record.description} ${record.dataOwner}`}\n                        defaultMaxRecordPerPage={5}\n                        defaultSorter={{ parameter: \"imdbRating\", order: \"DESC\" }}\n                        iterateFunction={(record) => {\n                            return (\n                                <tr key={record.Title}>\n                                    <td>\n                                        <img src={record.Images[0]} alt={record.Title} style={{ width: \"45px\", height: \"45px\" }} />\n                                    </td>\n                                    <td style={{\"backgroundColor\": \"blue\", \"color\": \"white\" }}>{record.Title}</td>\n                                    <td>{record.Year}</td>\n                                    <td>{record.Director}</td>\n                                    <td>{record.Actors}</td>\n                                    <td>{record.imdbRating}</td>\n                                    <td>{record.Released}</td>\n                                    <td>{record.Runtime}</td>\n\n                                </tr>\n                            )\n                        }}\n                        fields={[{\n                            text: \"\"\n                        },\n                        {\n                            text: \"Movie Title\",\n                            parameter: \"Title\"\n                        }, {\n                            text: \"Year\",\n                            parameter: \"Year\"\n                        }, {\n                            text: \"Film Director\",\n                            sortable: false\n                        }, {\n                            text: \"Actors\",\n                            sortable: false\n                        }, {\n                            text: \"Rating of imdb\",\n                            sortable: false\n                        }, {\n                            text: \"Released date\",\n                            sortable: false\n                        }, {\n                            text: \"Runtime\",\n                            parameter: \"Runtime\"\n                        }]} />\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default BasicTable;","import React from 'react';\n\nimport Introduction from \"components/Introduction\";\nimport BasicTable from \"components/BasicTable\";\nimport Paginate from \"components/Paginate\";\nimport Internationalization from \"components/Internationalization\";\nimport CustomStyles from \"components/CustomStyles\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div style={{ \"padding\": \"1em\", \"backgroundColor\": \"#fff\" }}>\n        <Introduction />\n\n        <BasicTable />\n\n        <Paginate />\n\n        <Internationalization />\n\n        <CustomStyles />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}